'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactSpin = require('react-spin');

var _reactSpin2 = _interopRequireDefault(_reactSpin);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var BasicLoading = (_temp = _class = function (_React$Component) {
    _inherits(BasicLoading, _React$Component);

    function BasicLoading(props, context) {
        _classCallCheck(this, BasicLoading);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

        var prefix = props.prefix,
            type = props.type,
            size = props.size;

        _this.typeName = prefix + '-' + type;
        _this.sizeName = _this.typeName + '-' + size;
        _this.className = (0, _classnames2['default'])(_this.typeName, _this.sizeName);
        _this.spinConfig = {
            lines: 15, // The number of lines to draw
            length: 14, // The length of each line
            width: 2, // The line thickness
            radius: 0, // The radius of the inner circle
            scale: 1, // Scales overall size of the spinner
            corners: 1, // Corner roundness (0..1)
            color: '#c7c7c7', // #rgb or #rrggbb or array of colors
            opacity: 0.05, // Opacity of the lines
            rotate: 0, // The rotation offset
            direction: 1, // 1: clockwise, -1: counterclockwise
            speed: 1.1, // Rounds per second
            trail: 50, // Afterglow percentage
            fps: 20, // Frames per second when using setTimeout() as a fallback for CSS
            zIndex: 2e9, // The z-index (defaults to 2000000000)
            className: 'spinner', // The CSS class to assign to the spinner
            top: '50%', // Top position relative to parent
            left: '50%', // Left position relative to parent
            shadow: false, // Whether to render a shadow
            hwaccel: false, // Whether to use hardware acceleration
            position: 'absolute' // Element positioning
        };
        return _this;
    }

    BasicLoading.prototype.render = function render() {
        var _props = this.props,
            type = _props.type,
            size = _props.size,
            color = _props.color,
            speed = _props.speed,
            opacity = _props.opacity;

        var baseConfig = {};
        switch (size) {
            case 'large':
                baseConfig = {
                    lines: 15,
                    length: 18,
                    scale: 1
                };
                break;
            case 'small':
                baseConfig = {
                    lines: 13,
                    length: 18,
                    scale: 0.5
                };
                break;
            default:
                break;

        }
        color ? baseConfig.color = color : null;
        speed ? baseConfig.speed = speed : null;
        opacity ? baseConfig.opacity = opacity : null;
        this.config = _extends(this.spinConfig, baseConfig);

        return _react2['default'].createElement(
            'div',
            { className: this.className },
            _react2['default'].createElement(_reactSpin2['default'], { config: this.config })
        );
    };

    return BasicLoading;
}(_react2['default'].Component), _class.propTypes = {
    prefix: _react.PropTypes.string,
    type: _react.PropTypes.string,
    size: _react.PropTypes.string,
    show: _react.PropTypes.bool
}, _class.defaultProps = {
    prefix: 'qn-loading',
    size: 'medium',
    show: false
}, _temp);
BasicLoading.displayName = 'BasicLoading';
exports['default'] = BasicLoading;
module.exports = exports['default'];